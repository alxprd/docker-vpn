#!/bin/sh

. /root/files/commons.sh

echo_template() {
	echo "Help: setup-server -h"
	echo "Use:  setup-server -s <server_name> [-force_(d)hp_gen] [-force_t(u)nnel_all_traffic]"
}

# Default param values:
server_name=''
force_dhp_gen=false
force_tunnel_all_traffic=false

while getopts 'hs:du' optp
do
	case $optp in
		h) echo_template; exit 0 ;;
		s) server_name=$OPTARG ;;
    d) force_dhp_gen=true ;;
		u) force_tunnel_all_traffic=true ;;
	esac
done

if [ -z "${server_name}" ]; then
	echo "Asign a valid server name!"
	echo_template
	exit 0
fi

name=$server_name
type_keys=server
. /root/files/vars.sh

import_ca_package

ca_needs_update=false

if [ -f "$ca_keys_dir/${server_name}.key" ]; then
	echo "Server crt/key for '$server_name' exist in CA"
else
	echo "Server crt/key for '$server_name' doesn't exist in CA"
	create_server_keys
	ca_needs_update=true
fi

if [ -f "$secrets_dir/$secret_name" ]; then
	echo "Server secret for '$server_name' exist in CA"
else
	echo "Server secret for '$server_name' doesn't exist in CA"
	generate_server_secret
	ca_needs_update=true
fi

if [ -f "$dhps_dir/$dhp_name" ]; then
	echo "DH param for '$server_name' exist in CA"
	if [ "$force_dhp_gen" = true ]; then
		echo "Force DH param generation (-d)"
		generate_dhparam
		ca_needs_update=true
	fi
else
	echo "DH param for '$server_name' doesn't exist in CA"
	generate_dhparam
	ca_needs_update=true
fi

if [ ! -f "$ca_keys_dir/crl.pem" ]; then
	echo "Generate empty revoked certificates file (crl.pem)"
	touch $ca_keys_dir/crl.pem
fi

if [ "$ca_needs_update" = true ] ; then
	update_ca_package
fi

export_keys
export_server_secret
export_dhparam
export_revoked_certs_file
export_server_conf

if [ "$force_tunnel_all_traffic" = true ]; then
	echo "Force tunnel all traffic (-u)"
	set_tunnel_all_traffic
fi

create_package

FROM debian:stretch

# Install wget to get the GPG keys to sign packages from OpenVPN repos
# Install gnupg to use with wget (apt-key add -)
# Install iptables to use iptables
# Install systemd to use systemctl
# Install net-tools to use ifconfig
# Install curl to check current public ip
RUN apt-get update && apt-get install -y wget gnupg iptables systemd net-tools curl

# Import the public GPG key that is used to sign the packages:
RUN wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -

# Create a sources.list fragment (as root) so that apt can find the new OpenVPN packages:
RUN echo "deb http://build.openvpn.net/debian/openvpn/stable stretch main" > /etc/apt/sources.list.d/openvpn-aptrepo.list

# Install OpenVPN from the OpenVPN Project's repository. Choose OpenVPN's repo over Debian's so that you'll always have the most up to date build for Debian Stretch:
RUN apt-get update && apt-get install -y openvpn

# By default, OpenVPN runs as root. The user nobody given in the server.conf template has fewer privileges than root. If nobody gets compromised, the intruder will have access to processes running as the nobody user. This can include Apache when using mod_php, various NFS mounts and some cron jobs. Forcing OpenVPN to run as its own exclusive user and group is a good way to isolate it from other processes, especially if you will also be hosting a web or file server on the same host as your VPN.
# Create a new user account and group for the OpenVPN daemon to run as after startup. The name ovpn is used as an example.
# Create 'ovpn' user for safety:
#RUN adduser --system --shell /usr/sbin/nologin --no-create-home ovpn && \
#	groupadd ovpn && \
#	usermod -g ovpn ovpn

# Require a matching HMAC signature for all packets involved in the TLS handshake between the server and connecting clients. Packets without this signature are dropped. To generate the HMAC signature file:
#RUN openvpn --genkey --secret /etc/openvpn/server/ta.key

# Generate Diffie-Hellman parameter. This is a set of randomly generated data used when establishing Perfect Forward Secrecy during creation of a client's session key. The default size is 2048 bits, but OpenVPN's documentation recommends to use a prime size equivalent to your RSA key size. Since you will be using 4096 bit RSA keys, create a 4096 bit DH prime. Depending on the size of your Linode, this could take approximately 10 minutes to complete.
# Note: According to OpenSSL's man page, genpkey -genparam supersedes dhparam.
#RUN openssl genpkey -genparam -algorithm DH -out /etc/openvpn/server/dhp4096.pem -pkeyopt dh_paramgen_prime_len:4096

# Start the OpenVPN daemon and enable it on reboot:
# Note: This will scan the /etc/openvpn directory on the server for files with a .conf extension. For every file that it finds, it will spawn a VPN daemon (server instance) so make sure you don't have a client.conf or client.ovpn file in there.
#RUN systemctl enable openvpn.* && systemctl start openvpn.*

#COPY files/rules.v4 /etc/iptables/
#COPY files/rules.v6 /etc/iptables/

COPY bin/ /usr/local/bin/
RUN chmod a+x /usr/local/bin/*

# Internally uses port 1194/udp, remap using `docker run -p 443:1194/tcp`
EXPOSE 1194/udp

# To check the status of the OpenVPN process:
#sudo systemctl status openvpn*

# Use sudo journalctl -f | grep vpn to monitor the logs of your OpenVPN server in realtime; press Control+C to stop monitoring. The command sudo journalctl -xe | grep openvpn can also be useful for troubleshooting.
